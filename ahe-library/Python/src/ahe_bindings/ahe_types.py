from typing import List

import hashlib

from .ahe_exceptions import AheOperationOnEmptyObject


class Maabe:
    """The Maabe class represents the global information of the Maabe scheme.

    It contains the following information:
        P   -   the prime order of the underlying curve,
        G1  -   the generator of the first group,
        G2  -   the generator of the second group,
        Gt  -   pairing(G1, G2)

    :param maabeStrList:    A string list [P, G1, G2, Gt] as generated by
                            libahe.so.
    :type maabeStrList:     list[str]
    """

    def __init__(self,
                 maabeStrList: List[str] = []
                 ) -> None:
        """The constructor for the Maabe class.
        """
        self.P: str = ""
        self.G1: str = ""
        self.G2: str = ""
        self.Gt: str = ""
        if len(maabeStrList) == 4:
            self.P = maabeStrList[0]
            self.G1 = maabeStrList[1]
            self.G2 = maabeStrList[2]
            self.Gt = maabeStrList[3]

    def __repr__(self) -> str:
        """Pretty print object.
        """
        return "Maabe([{}, {}, {}, {}])".format(self.P,
                                                self.G1,
                                                self.G2,
                                                self.Gt)

    def __str__(self) -> str:
        """Pretty print object.
        """
        return "Maabe([{}, {}, {}, {}])".format(self.P,
                                                self.G1,
                                                self.G2,
                                                self.Gt)

    def toStringList(self) -> List[str]:
        """Transforms the wrapper type back into a string list. Effectively the
        opposite of __init__().

        :return:                            A string list representing the
                                            object.
        :rtype:                             list[str]
        :raises AheOperationOnEmptyObject:  trying to make a list out of an
                                            empty object
        """
        if self.isEmpty():
            raise(AheOperationOnEmptyObject)
        strList: List[str] = []
        strList.append(self.P)
        strList.append(self.G1)
        strList.append(self.G2)
        strList.append(self.Gt)
        return strList

    def isEmpty(self) -> bool:
        """Checks whether the object contains all necessary data.

        :return:    A truth value, true if the object is considered 'empty'.
        :rtype:     bool
        """
        return not (self.P and self.G1 and self.G2 and self.Gt)


class MaabePubKey:
    """The MaabePubKey class represents a collection of public keys in the
    Maabe scheme belonging to a single authority.

    It contains the following information:
        attrib      -   a list of attributes managed by this authority,
        eggToAlpha  -   a list of public keys (1/2), one for each attribute,
        gToY        -   a list of public keys (2/2), one for each attribute

    :param pubkeyStrList:   A string list of consecutive triples
                            [attrib1, eggToAlpha1, gToY1,...] as generated by
                            libahe.so.
    :type pubkeyStrList:    list[str]
    """

    def __init__(self,
                 pubkeyStrList: List[str] = []
                 ) -> None:
        """The constructor for the MaabePubKey class.
        """
        self.attrib: List[str] = []
        self.eggToAlpha: List[str] = []
        self.gToY: List[str] = []
        if len(pubkeyStrList) % 3 == 0:
            for i in range(len(pubkeyStrList) // 3):
                self.attrib.append(pubkeyStrList[i*3+0])
                self.eggToAlpha.append(pubkeyStrList[i*3+1])
                self.gToY.append(pubkeyStrList[i*3+2])

    def __repr__(self) -> str:
        """Pretty print object.
        """
        retStr: str = "MaabePubKey("
        for i in range(len(self.attrib)):
            retStr += " {} -> ({}, {}),".format(self.attrib[i],
                                                self.eggToAlpha[i],
                                                self.gToY[i])
        retStr += ")"
        return retStr

    def __str__(self) -> str:
        """Pretty print object.
        """
        retStr: str = "MaabePubKey("
        for i in range(len(self.attrib)):
            retStr += " {} -> ({}, {}),".format(self.attrib[i],
                                                self.eggToAlpha[i],
                                                self.gToY[i])
        retStr += ")"
        return retStr

    def toStringList(self) -> List[str]:
        """Transforms the wrapper type back into a string list. Effectively the
        opposite of __init__().

        :return:                            A string list representing the
                                            object.
        :rtype:                             list[str]
        :raises AheOperationOnEmptyObject:  trying to make a list out of an
                                            empty object
        """
        if self.isEmpty():
            raise(AheOperationOnEmptyObject)
        strList: List[str] = []
        for i in range(len(self.attrib)):
            strList.append(self.attrib[i])
            strList.append(self.eggToAlpha[i])
            strList.append(self.gToY[i])
        return strList

    def isEmpty(self) -> bool:
        """Checks whether the object contains all necessary data.

        :return:    A truth value, true if the object is considered 'empty'.
        :rtype:     bool
        """
        return not (self.attrib and self.eggToAlpha and self.gToY)


class MaabeSecKey:
    """The MaabeSecKey class represents a collection of secret keys in the
    Maabe scheme belonging to a single authority.

    It contains the following information:
        attrib  -   a list of attributes managed by this authority,
        alpha   -   a list of secret keys (1/2), one for each attribute,
        y       -   a list of secret keys (2/2), one for each attribute

    :param seckeyStrList:   A string list of consecutive triples
                            [attrib1, alpha1, y1, attrib2, alpha2, y2,...]
                            as generated by libahe.so.
    :type seckeyStrList:    list[str]
    """

    def __init__(self,
                 seckeyStrList: List[str] = []
                 ) -> None:
        """The constructor for the MaabeSecKey class.
        """
        self.attrib: List[str] = []
        self.alpha: List[str] = []
        self.y: List[str] = []
        if len(seckeyStrList) % 3 == 0:
            for i in range(len(seckeyStrList) // 3):
                self.attrib.append(seckeyStrList[i*3+0])
                self.alpha.append(seckeyStrList[i*3+1])
                self.y.append(seckeyStrList[i*3+2])

    def __repr__(self) -> str:
        """Pretty print object.
        """
        retStr: str = "MaabeSecKey("
        for i in range(len(self.attrib)):
            retStr += " {} -> ({}, {}),".format(self.attrib[i],
                                                self.alpha[i],
                                                self.y[i])
        retStr += ")"
        return retStr

    def __str__(self) -> str:
        """Pretty print object.
        """
        retStr: str = "MaabeSecKey("
        for i in range(len(self.attrib)):
            retStr += " {} -> ({}, {}),".format(self.attrib[i],
                                                self.alpha[i],
                                                self.y[i])
        retStr += ")"
        return retStr

    def toStringList(self) -> List[str]:
        """Transforms the wrapper type back into a string list. Effectively the
        opposite of __init__().

        :return:                            A string list representing the
                                            object.
        :rtype:                             list[str]
        :raises AheOperationOnEmptyObject:  trying to make a list out of an
                                            empty object
        """
        if self.isEmpty():
            raise(AheOperationOnEmptyObject)
        strList: List[str] = []
        for i in range(len(self.attrib)):
            strList.append(self.attrib[i])
            strList.append(self.alpha[i])
            strList.append(self.y[i])
        return strList

    def isEmpty(self) -> bool:
        """Checks whether the object contains all necessary data.

        :return:    A truth value, true if the object is considered 'empty'.
        :rtype:     bool
        """
        return not (self.attrib and self.alpha and self.y)


class MaabeAuth:
    """The MaabeAuth class represents an authority in the Maabe scheme.

    It contains the following information:
        ID      -   A string ID of the attribute.
        Maabe   -   A Maabe object with the public parameters of the scheme.
        Pk      -   A MaabePubKey object for this authority.
        Sk      -   A MaabeSecKey object for this authority.

    :param authStrList:     A string list of data
                            [ID, P, G1, G2, Gt,
                            attribute1, eggToAlpha1, gToY1, alpha1, y1,...]
                            as generated by libahe.so.
    :type authStrList:      list[str]
    """

    def __init__(self,
                 authStrList: List[str] = []
                 ) -> None:
        """The constructor for the MaabeAuth class.
        """
        self.ID: str = ""
        self.Maabe: Maabe = Maabe()
        self.Pk: MaabePubKey = MaabePubKey()
        self.Sk: MaabeSecKey = MaabeSecKey()
        if len(authStrList) % 5 == 0 and len(authStrList) >= 5:
            self.ID = authStrList[0]
            self.Maabe.P = authStrList[1]
            self.Maabe.G1 = authStrList[2]
            self.Maabe.G2 = authStrList[3]
            self.Maabe.Gt = authStrList[4]
            for i in range((len(authStrList) - 5) // 5):
                self.Pk.attrib.append(authStrList[i*5+5])
                self.Pk.eggToAlpha.append(authStrList[i*5+6])
                self.Pk.gToY.append(authStrList[i*5+7])
                self.Sk.attrib.append(authStrList[i*5+5])
                self.Sk.alpha.append(authStrList[i*5+8])
                self.Sk.y.append(authStrList[i*5+9])

    def __repr__(self) -> str:
        """Pretty print object.
        """
        return "MaabeAuth({}, {}, {}, {})".format(self.ID,
                                                  self.Maabe.__str__(),
                                                  self.Pk.__str__(),
                                                  self.Sk.__str__())

    def __str__(self) -> str:
        """Pretty print object.
        """
        return "MaabeAuth({}, {}, {}, {})".format(self.ID,
                                                  self.Maabe.__str__(),
                                                  self.Pk.__str__(),
                                                  self.Sk.__str__())

    def toStringList(self) -> List[str]:
        """Transforms the wrapper type back into a string list. Effectively the
        opposite of __init__().

        :return:                            A string list representing the
                                            object.
        :rtype:                             list[str]
        :raises AheOperationOnEmptyObject:  trying to make a list out of an
                                            empty object
        """
        if self.isEmpty():
            raise(AheOperationOnEmptyObject)
        strList: List[str] = []
        maabeList: List[str] = self.Maabe.toStringList()
        pkList: List[str] = self.Pk.toStringList()
        skList: List[str] = self.Sk.toStringList()
        strList.append(self.ID)
        strList += maabeList
        for i in range(len(pkList) // 3):
            strList.append(pkList[i*3+0])
            strList.append(pkList[i*3+1])
            strList.append(pkList[i*3+2])
            strList.append(skList[i*3+1])
            strList.append(skList[i*3+2])
        return strList

    def isEmpty(self) -> bool:
        """Checks whether the object contains all necessary data.

        :return:    A truth value, true if the object is considered 'empty'.
        :rtype:     bool
        """
        return ((not self.ID) or
                self.Maabe.isEmpty() or
                self.Pk.isEmpty() or
                self.Sk.isEmpty())


class MaabeCipher:
    """The MaabeCipher class represents an ciphertext object in the Maabe
    scheme.

    It contains the following information:
        SymEnc          -   the AES encryption of plaintext in string format,
        Iv              -   initialization vector for AES in string format,
        MSP_P           -   currently unused so always set to '0',
        MSP_Mat         -   a serialized matrix for the decryption policy,
        MSP_RowToAttrib -   a serialized string of ordered attributes,
        C0              -   string Maabe encrypted secret key for AES (1/4),
        attrib          -   a str list of attributes used to encrypt the key,
        C1              -   str List of Maabe encrypted sec key for AES (2/4),
        C2              -   str List of Maabe encrypted sec key for AES (3/4),
        C3              -   str List of Maabe encrypted sec key for AES (4/4)

    :param cipherStrList:   A string list of data
                            [SymEnc, Iv, MSP_P, MSP_Mat, MSP_RowToAttrib,
                            C0, attrib1, C11, C21, C31,...]
                            as generated by libahe.so.
    :type cipherStrList:    list[str]
    """

    def __init__(self,
                 cipherStrList: List[str] = []
                 ) -> None:
        """The constructor for the MaabeCipher class.
        """
        self.SymEnc: str = ""
        self.Iv: str = ""
        self.MSP_P: str = ""
        self.MSP_Mat: str = ""
        self.MSP_RowToAttrib: str = ""
        self.C0: str = ""
        self.attrib: List[str] = []
        self.C1: List[str] = []
        self.C2: List[str] = []
        self.C3: List[str] = []
        if len(cipherStrList) >= 6 and (len(cipherStrList) - 6) % 4 == 0:
            self.SymEnc = cipherStrList[0]
            self.Iv = cipherStrList[1]
            self.MSP_P = cipherStrList[2]
            self.MSP_Mat = cipherStrList[3]
            self.MSP_RowToAttrib = cipherStrList[4]
            self.C0 = cipherStrList[5]
            for i in range((len(cipherStrList)-6) // 4):
                self.attrib.append(cipherStrList[i*4 + 6])
                self.C1.append(cipherStrList[i*4 + 7])
                self.C2.append(cipherStrList[i*4 + 8])
                self.C3.append(cipherStrList[i*4 + 9])

    def __repr__(self) -> str:
        """Pretty print object.
        """
        retTmp: str = "MaabeCipher({}, {}, {}, {}, {}, {},"
        retStr: str = retTmp.format(self.SymEnc,
                                    self.Iv,
                                    self.MSP_P,
                                    self.MSP_Mat,
                                    self.MSP_RowToAttrib,
                                    self.C0)
        for i in range(len(self.attrib)):
            retStr += " {} -> ({}, {}, {}),".format(self.attrib[i],
                                                    self.C1[i],
                                                    self.C2[i],
                                                    self.C3[i])
        retStr += ")"
        return retStr

    def __str__(self) -> str:
        """Pretty print object.
        """
        retTmp: str = "MaabeCipher({}, {}, {}, {}, {}, {},"
        retStr: str = retTmp.format(self.SymEnc,
                                    self.Iv,
                                    self.MSP_P,
                                    self.MSP_Mat,
                                    self.MSP_RowToAttrib,
                                    self.C0)
        for i in range(len(self.attrib)):
            retStr += " {} -> ({}, {}, {}),".format(self.attrib[i],
                                                    self.C1[i],
                                                    self.C2[i],
                                                    self.C3[i])
        retStr += ")"
        return retStr

    def toStringList(self) -> List[str]:
        """Transforms the wrapper type back into a string list. Effectively the
        opposite of __init__().

        :return:                            A string list representing the
                                            object.
        :rtype:                             list[str]
        :raises AheOperationOnEmptyObject:  trying to make a list out of an
                                            empty object
        """
        if self.isEmpty():
            raise(AheOperationOnEmptyObject)
        strList: List[str] = []
        strList.append(self.SymEnc)
        strList.append(self.Iv)
        strList.append(self.MSP_P)
        strList.append(self.MSP_Mat)
        strList.append(self.MSP_RowToAttrib)
        strList.append(self.C0)
        for i in range(len(self.attrib)):
            strList.append(self.attrib[i])
            strList.append(self.C1[i])
            strList.append(self.C2[i])
            strList.append(self.C3[i])
        return strList

    def isEmpty(self) -> bool:
        """Checks whether the object contains all necessary data.

        :return:    A truth value, true if the object is considered 'empty'.
        :rtype:     bool
        """
        return not (self.SymEnc and
                    self.Iv and
                    self.MSP_P and
                    self.MSP_Mat and
                    self.MSP_RowToAttrib and
                    self.C0 and
                    self.attrib and
                    self.C1 and
                    self.C2 and
                    self.C3)

    def sha256sum(self) -> str:
        """Joins the list representation of this class with spaces and hashes
        the resulting string using SHA256.

        :return:                            A string (hexdigest) hash of the
                                            ciphertext.
        :rtype:                             str
        :raises AheOperationOnEmptyObject:  trying to hash an empty object
        """
        if self.isEmpty():
            raise(AheOperationOnEmptyObject)
        strToHash: str = ' '.join(self.toStringList())
        return hashlib.sha256(strToHash.encode('utf-8')).hexdigest()


class MaabeKey:
    """The MaabeKey class represents an attribute decryption key in the Maabe
    scheme.

    It contains the following information:
        Gid     -   a string global identifier of the key holder,
        Attrib  -   a string attribute the key represents,
        Key     -   the string key itself

    :param keyStrList:      A string list of data [Gid, Attribute, Key] as
                            generated by libahe.so.
    :type keyStrList:       list[str]
    """

    def __init__(self,
                 keyStrList: List[str] = []
                 ) -> None:
        """The constructor for the MaabeKey class.
        """
        self.Gid: str = ""
        self.Attrib: str = ""
        self.Key: str = ""
        if len(keyStrList) == 3:
            self.Gid = keyStrList[0]
            self.Attrib = keyStrList[1]
            self.Key = keyStrList[2]

    def __repr__(self) -> str:
        """Pretty print object.
        """
        return "MaabeKey({}, {}, {})".format(self.Gid,
                                             self.Attrib,
                                             self.Key)

    def __str__(self) -> str:
        """Pretty print object.
        """
        return "MaabeKey({}, {}, {})".format(self.Gid,
                                             self.Attrib,
                                             self.Key)

    def toStringList(self) -> List[str]:
        """Transforms the wrapper type back into a string list. Effectively the
        opposite of __init__().

        :return:                            A string list representing the
                                            object.
        :rtype:                             list[str]
        :raises AheOperationOnEmptyObject:  trying to make a list out of an
                                            empty object
        """
        if self.isEmpty():
            raise(AheOperationOnEmptyObject)
        return [self.Gid, self.Attrib, self.Key]

    def isEmpty(self) -> bool:
        """Checks whether the object contains all necessary data.

        :return:    A truth value, true if the object is considered 'empty'.
        :rtype:     bool
        """
        return not (self.Gid and self.Attrib and self.Key)

class Fame:
    """The Maabe class represents the global information of the Maabe scheme.

    It contains the following information:
        P   -   the prime order of the underlying curve,

    :param maabeStrList:    A string list [P, G1, G2, Gt] as generated by
                            libahe.so.
    :type maabeStrList:     list[str]
    """

    def __init__(self,
                 fameStr: str = ""
                 ) -> None:
        """The constructor for the Maabe class.
        """
        self.fame: str = ""
        if len(fameStr) > 0:
            self.fame = fameStr

    def __repr__(self) -> str:
        """Pretty print object.
        """
        return "Fame({})".format(self.fame)

    def __str__(self) -> str:
        """Pretty print object.
        """
        return "Fame({})".format(self.fame)

    def toString(self) -> str:
        """Transforms the wrapper type back into a string list. Effectively the
        opposite of __init__().

        :return:                            A string representing the
                                            object.
        :rtype:                             str
        :raises AheOperationOnEmptyObject:  trying to make a list out of an
                                            empty object
        """
        if self.isEmpty():
            raise(AheOperationOnEmptyObject)

        return self.fame

    def isEmpty(self) -> bool:
        """Checks whether the object contains all necessary data.

        :return:    A truth value, true if the object is considered 'empty'.
        :rtype:     bool
        """
        return not self.fame


class FamePubKey:
    def __init__(self,
                 pubkeyStr: str = ""
                 ) -> None:
        """The constructor for the MaabePubKey class.
        """
        self.pub_key = pubkeyStr

    def __repr__(self) -> str:
        """Pretty print object.
        """
        retStr: str = "FamePubKey("
        retStr += self.pub_key
        retStr += ")"

        return retStr

    def __str__(self) -> str:
        """Pretty print object.
        """
        retStr: str = "FamePubKey("
        retStr += self.pub_key
        retStr += ")"

        return retStr

    def toString(self) -> str:
        return self.pub_key

    def isEmpty(self) -> bool:
        """Checks whether the object contains all necessary data.

        :return:    A truth value, true if the object is considered 'empty'.
        :rtype:     bool
        """
        return not self.pub_key


class FameSecKey:
    def __init__(self,
                 pubkeyStr: str = ""
                 ) -> None:
        """The constructor for the MaabePubKey class.
        """
        self.sec_key = pubkeyStr

    def __repr__(self) -> str:
        """Pretty print object.
        """
        retStr: str = "FameSecKey("
        retStr += self.sec_key
        retStr += ")"

        return retStr

    def __str__(self) -> str:
        """Pretty print object.
        """
        retStr: str = "FameSecKey("
        retStr += self.sec_key
        retStr += ")"

        return retStr

    def toString(self) -> str:
        return self.sec_key

    def isEmpty(self) -> bool:
        """Checks whether the object contains all necessary data.

        :return:    A truth value, true if the object is considered 'empty'.
        :rtype:     bool
        """

        return not self.sec_key


class FameCipher:
    """The MaabeCipher class represents an ciphertext object in the Maabe
    scheme.

    It contains the following information:
        SymEnc          -   the AES encryption of plaintext in string format,
        Iv              -   initialization vector for AES in string format,
        MSP_P           -   currently unused so always set to '0',
        MSP_Mat         -   a serialized matrix for the decryption policy,
        MSP_RowToAttrib -   a serialized string of ordered attributes,
        C0              -   string Maabe encrypted secret key for AES (1/4),
        attrib          -   a str list of attributes used to encrypt the key,
        C1              -   str List of Maabe encrypted sec key for AES (2/4),
        C2              -   str List of Maabe encrypted sec key for AES (3/4),
        C3              -   str List of Maabe encrypted sec key for AES (4/4)

    :param cipherStrList:   A string list of data
                            [SymEnc, Iv, MSP_P, MSP_Mat, MSP_RowToAttrib,
                            C0, attrib1, C11, C21, C31,...]
                            as generated by libahe.so.
    :type cipherStrList:    list[str]
    """

    def __init__(self,
                 cipherStrList: List[str] = []
                 ) -> None:
        """The constructor for the MaabeCipher class.
        """
        self.SymEnc: str = ""
        self.Iv: str = ""
        self.MSP_P: str = ""
        self.MSP_Mat: str = ""
        self.MSP_RowToAttrib: str = ""
        self.C0: str = ""
        self.CPrime: str = ""
        self.Ct: List[str] = []
        if len(cipherStrList) >= 7:
            self.SymEnc = cipherStrList[0]
            self.Iv = cipherStrList[1]
            self.MSP_P = cipherStrList[2]
            self.MSP_Mat = cipherStrList[3]
            self.MSP_RowToAttrib = cipherStrList[4]
            self.C0 = cipherStrList[5]
            self.CPrime = cipherStrList[6]
            for i in range(7, (len(cipherStrList))):
                self.Ct.append(cipherStrList[i])

    def __repr__(self) -> str:
        """Pretty print object.
        """
        retTmp: str = "FameCipher({}, {}, {}, {}, {}, {}, {}"
        retStr: str = retTmp.format(self.SymEnc,
                                    self.Iv,
                                    self.MSP_P,
                                    self.MSP_Mat,
                                    self.MSP_RowToAttrib,
                                    self.C0,
                                    self.CPrime)
        for i in range(len(self.Ct)):
            retStr += " {}),".format(self.Ct[i])
        retStr += ")"
        return retStr

    def __str__(self) -> str:
        """Pretty print object.
        """
        retTmp: str = "FameCipher({}, {}, {}, {}, {}, {}, {}"
        retStr: str = retTmp.format(self.SymEnc,
                                    self.Iv,
                                    self.MSP_P,
                                    self.MSP_Mat,
                                    self.MSP_RowToAttrib,
                                    self.C0,
                                    self.CPrime)
        for i in range(len(self.Ct)):
            retStr += " {}),".format(self.Ct[i])
        retStr += ")"
        return retStr

    def toStringList(self) -> List[str]:
        """Transforms the wrapper type back into a string list. Effectively the
        opposite of __init__().

        :return:                            A string list representing the
                                            object.
        :rtype:                             list[str]
        :raises AheOperationOnEmptyObject:  trying to make a list out of an
                                            empty object
        """
        if self.isEmpty():
            raise(AheOperationOnEmptyObject)
        strList: List[str] = []
        strList.append(self.SymEnc)
        strList.append(self.Iv)
        strList.append(self.MSP_P)
        strList.append(self.MSP_Mat)
        strList.append(self.MSP_RowToAttrib)
        strList.append(self.C0)
        strList.append(self.CPrime)
        for i in range(len(self.Ct)):
            strList.append(self.Ct[i])
        return strList

    def isEmpty(self) -> bool:
        """Checks whether the object contains all necessary data.

        :return:    A truth value, true if the object is considered 'empty'.
        :rtype:     bool
        """
        return not (self.SymEnc and
                    self.Iv and
                    self.MSP_P and
                    self.MSP_Mat and
                    self.MSP_RowToAttrib and
                    self.C0 and
                    self.CPrime and
                    self.Ct)

    def sha256sum(self) -> str:
        """Joins the list representation of this class with spaces and hashes
        the resulting string using SHA256.

        :return:                            A string (hexdigest) hash of the
                                            ciphertext.
        :rtype:                             str
        :raises AheOperationOnEmptyObject:  trying to hash an empty object
        """
        if self.isEmpty():
            raise(AheOperationOnEmptyObject)
        strToHash: str = ' '.join(self.toStringList())
        return hashlib.sha256(strToHash.encode('utf-8')).hexdigest()

class FameKey:
    """The MaabeKey class represents an attribute decryption key in the Maabe
    scheme.

    It contains the following information:
        Gid     -   a string global identifier of the key holder,
        Attrib  -   a string attribute the key represents,
        Key     -   the string key itself

    :param keyStrList:      A string list of data [Gid, Attribute, Key] as
                            generated by libahe.so.
    :type keyStrList:       list[str]
    """

    def __init__(self,
                 keyStrList: List[str] = []
                 ) -> None:
        """The constructor for the MaabeKey class.
        """
        self.K0: str = ""
        self.KPrime: str = ""
        self.Attribs: str = ""
        self.K: List[str] = []

        if len(keyStrList) >= 4:
            self.K0 = keyStrList[0]
            self.KPrime = keyStrList[1]
            self.Attribs = keyStrList[2]
            for i in range(3, (len(keyStrList))):
                self.K.append(keyStrList[i])


    def __repr__(self) -> str:
        """Pretty print object.
        """
        retTmp: str = "FameAttributeKeys({}, {}, {}, "
        retStr: str = retTmp.format(self.K0,
                                    self.KPrime,
                                    self.Attribs)
        for i in range(len(self.K)):
            retStr += " {},".format(self.K[i])
        retStr += ")"
        return retStr

    def __str__(self) -> str:
        """Pretty print object.
        """
        retTmp: str = "FameAttributeKeys({}, {}, {}, "
        retStr: str = retTmp.format(self.K0,
                                    self.KPrime,
                                    self.Attribs)
        for i in range(len(self.K)):
            retStr += " {},".format(self.K[i])
        retStr += ")"
        return retStr

    def toStringList(self) -> List[str]:
        """Transforms the wrapper type back into a string list. Effectively the
        opposite of __init__().

        :return:                            A string list representing the
                                            object.
        :rtype:                             list[str]
        :raises AheOperationOnEmptyObject:  trying to make a list out of an
                                            empty object
        """
        if self.isEmpty():
            raise(AheOperationOnEmptyObject)
        strList: List[str] = []
        strList.append(self.K0)
        strList.append(self.KPrime)
        strList.append(self.Attribs)
        for i in range(len(self.K)):
            strList.append(self.K[i])
        return strList

    def isEmpty(self) -> bool:
        """Checks whether the object contains all necessary data.

        :return:    A truth value, true if the object is considered 'empty'.
        :rtype:     bool
        """
        return not (self.K0 and
                    self.KPrime and
                    self.Attribs and
                    self.K)

